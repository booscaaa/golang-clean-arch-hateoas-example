// Code generated by MockGen. DO NOT EDIT.
// Source: core/domain/item.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"
	time "time"

	domain "github.com/booscaaa/golang-clean-arch-hateoas-example/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockItemUsecase is a mock of ItemUsecase interface.
type MockItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockItemUsecaseMockRecorder
}

// MockItemUsecaseMockRecorder is the mock recorder for MockItemUsecase.
type MockItemUsecaseMockRecorder struct {
	mock *MockItemUsecase
}

// NewMockItemUsecase creates a new mock instance.
func NewMockItemUsecase(ctrl *gomock.Controller) *MockItemUsecase {
	mock := &MockItemUsecase{ctrl: ctrl}
	mock.recorder = &MockItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemUsecase) EXPECT() *MockItemUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemUsecase) Create(item domain.Item) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemUsecaseMockRecorder) Create(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemUsecase)(nil).Create), item)
}

// Delete mocks base method.
func (m *MockItemUsecase) Delete(id int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockItemUsecaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemUsecase)(nil).Delete), id)
}

// Fetch mocks base method.
func (m *MockItemUsecase) Fetch(initials string) (*[]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", initials)
	ret0, _ := ret[0].(*[]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockItemUsecaseMockRecorder) Fetch(initials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockItemUsecase)(nil).Fetch), initials)
}

// GetByID mocks base method.
func (m *MockItemUsecase) GetByID(id int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockItemUsecaseMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockItemUsecase)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockItemUsecase) Update(item domain.Item) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", item)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemUsecaseMockRecorder) Update(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemUsecase)(nil).Update), item)
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemRepository) Create(date time.Time, description, name, initials string) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", date, description, name, initials)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemRepositoryMockRecorder) Create(date, description, name, initials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemRepository)(nil).Create), date, description, name, initials)
}

// Delete mocks base method.
func (m *MockItemRepository) Delete(id int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockItemRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemRepository)(nil).Delete), id)
}

// Fetch mocks base method.
func (m *MockItemRepository) Fetch(initials string) (*[]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", initials)
	ret0, _ := ret[0].(*[]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockItemRepositoryMockRecorder) Fetch(initials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockItemRepository)(nil).Fetch), initials)
}

// GetByID mocks base method.
func (m *MockItemRepository) GetByID(id int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockItemRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockItemRepository)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockItemRepository) Update(id int, date time.Time, description, name, initials string) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, date, description, name, initials)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemRepositoryMockRecorder) Update(id, date, description, name, initials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemRepository)(nil).Update), id, date, description, name, initials)
}

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemService) CreateItem(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateItem", response, request)
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemServiceMockRecorder) CreateItem(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemService)(nil).CreateItem), response, request)
}

// DeleteItem mocks base method.
func (m *MockItemService) DeleteItem(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteItem", response, request)
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemServiceMockRecorder) DeleteItem(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemService)(nil).DeleteItem), response, request)
}

// FetchItems mocks base method.
func (m *MockItemService) FetchItems(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchItems", response, request)
}

// FetchItems indicates an expected call of FetchItems.
func (mr *MockItemServiceMockRecorder) FetchItems(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchItems", reflect.TypeOf((*MockItemService)(nil).FetchItems), response, request)
}

// GetItemByID mocks base method.
func (m *MockItemService) GetItemByID(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetItemByID", response, request)
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockItemServiceMockRecorder) GetItemByID(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockItemService)(nil).GetItemByID), response, request)
}

// UpdateItem mocks base method.
func (m *MockItemService) UpdateItem(response http.ResponseWriter, request *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateItem", response, request)
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemServiceMockRecorder) UpdateItem(response, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemService)(nil).UpdateItem), response, request)
}
